{{- if and (hasKey $.Values.mariadb "autostart") (not $.Values.mariadb.autostart) }}
{{- else if and ($.Values.command) (hasKey $.Values.command "application") }}
{{- else if or (and (hasKey $.Values.mariadb.galera.restore "restic") ($.Values.mariadb.galera.restore.restic.enabled)) (and (hasKey $.Values.mariadb.galera.restore "kopia") ($.Values.mariadb.galera.restore.kopia.enabled)) }}
{{- else if and (hasKey $.Values.mariadb "wipeDataAndLog") ($.Values.mariadb.wipeDataAndLog) }}
{{- else if $.Values.proxy.enabled }}
  {{- $unevenNodeCount := "" }}
  {{- if eq (mod ($.Values.replicas.proxy|int) 2) 1 }}
    {{- $unevenNodeCount = "true" }}
  {{- end }}
  {{- $_ := (required ".replicas value not an uneven integer. This is required to avoid a split brain cluster state." $unevenNodeCount) }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: {{ $.Release.Namespace }}
  name: {{ (include "nodeNamePrefix" (dict "global" $ "component" "proxy")) }}
  labels:
    app: {{ $.Release.Name }}
    component: "proxy"
    release: {{ $.Release.Name }}
spec:
  replicas: {{ $.Values.replicas.proxy | default 3 }}
  serviceName: {{ $.Release.Name }}
  selector:
    matchLabels:
      component: "proxy"
  revisionHistoryLimit: {{ $.Values.revisionHistoryLimit | default 10 | int }}
  podManagementPolicy: {{ $.Values.podManagementPolicy | default "OrderedReady" | quote }}
  updateStrategy:
    type: {{ required "updateStrategy setting required" $.Values.updateStrategy }}
  template:
    metadata:
      labels:
        app: {{ $.Release.Name }}
        component: "proxy"
        release: {{ $.Release.Name }}
      annotations:
        {{- if $.Values.monitoring.proxy.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ (required ".services.proxy.backend.ports.restapi.targetPort missing" $.Values.services.proxy.backend.ports.restapi.targetPort) }}
        prometheus.io/targets: {{ $.Values.monitoring.prometheus.instance | default "prometheus" | quote }}
        {{- end }}
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap-proxysql.yaml") $ | sha256sum }}
        checksum/proxysql.conf: {{ include (print $.Template.BasePath "/configmap-proxysql.conf.yaml") $ | sha256sum }}
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          {{- if $.Values.regional }}
          - labelSelector:
              matchExpressions:
              - key: "app"
                operator: In
                values:
                - {{ $.Release.Name }}
            namespaces:
              - {{ $.Release.Namespace }}
            topologyKey: "topology.kubernetes.io/zone"
          {{- end }}
          - labelSelector:
              matchExpressions:
                - key: "app"
                  operator: In
                  values:
                  - {{ $.Release.Name }}
            namespaces:
              - {{ $.Release.Namespace }}
            topologyKey: "kubernetes.io/hostname"
      serviceAccount: {{ $.Release.Name }}
      securityContext:
        runAsUser:  {{ $.Values.userId.proxy | default 3100 | int }}
        runAsGroup: {{ $.Values.groupId.proxy | default 3100 | int }}
        fsGroup:  {{ $.Values.groupId.proxy | default 3100 | int }}
      {{- if and (hasKey $.Values.image.proxy "pullSecret") $.Values.image.proxy.pullSecret }}
      imagePullSecrets:
      - name: {{ $.Release.Name }}-{{$.Values.image.proxy.pullSecret}}
      {{- end }}
      initContainers:
      - name: sysctl-tcp-keepalive
        image: "{{ $.Values.image.os.registry }}/{{ $.Values.image.os.project }}/{{ $.Values.image.os.applicationname }}:{{ $.Values.image.os.applicationversion }}-{{ $.Values.image.os.imageversion }}"
        imagePullPolicy: {{ $.Values.image.os.pullPolicy | default "IfNotPresent" | quote }}
        command:
        - sh
        - -c
        - 'sysctl -w net.ipv4.tcp_keepalive_time=60 net.ipv4.tcp_keepalive_intvl=60 net.ipv4.tcp_keepalive_probes=5'
        securityContext:
          privileged: {{ $.Values.initContainers.tcpKeepAlive.securityContext.privileged | default true }}
          runAsUser: {{ $.Values.initContainers.tcpKeepAlive.securityContext.runAsUser | default 0 | int }}
      - name: increase-map-count
        image: "{{ $.Values.image.os.registry }}/{{ $.Values.image.os.project }}/{{ $.Values.image.os.applicationname }}:{{ $.Values.image.os.applicationversion }}-{{ $.Values.image.os.imageversion }}"
        imagePullPolicy: {{ $.Values.image.os.pullPolicy | default "IfNotPresent" | quote }}
        command:
        - sh
        - -c
        - 'echo 262144 > /proc/sys/vm/max_map_count'
        securityContext:
          privileged: {{ $.Values.initContainers.increaseMapCount.securityContext.privileged | default true }}
          runAsUser: {{ $.Values.initContainers.increaseMapCount.securityContext.runAsUser | default 0 | int }}
      containers:
      - name: {{ (include "nodeNamePrefix" (dict "global" $ "component" "proxy")) }}
        image: "{{ $.Values.image.proxy.registry }}/{{ $.Values.image.proxy.project }}/{{ $.Values.image.proxy.applicationname }}:{{ $.Values.image.proxy.applicationversion }}-{{ $.Values.image.proxy.imageversion }}"
        imagePullPolicy: {{ $.Values.image.proxy.pullPolicy | default "IfNotPresent" | quote }}
        securityContext:
          runAsUser:  {{ $.Values.userId.proxy | default 3100 | int }}
          runAsGroup: {{ $.Values.groupId.proxy | default 3100 | int }}
          capabilities:
            add:
              - IPC_LOCK
        # disabled because not whitelisted
        # sysctls:
        # - name: net.ipv4.tcp_keepalive_time
        #   value: "60"
        # - name: net.ipv4.tcp_keepalive_intvl
        #   value: "60"
        # - name: net.ipv4.tcp_keepalive_probes
        #   value: "5"
        {{- if and ($.Values.command) (hasKey $.Values.command "proxy") }}
        command:
{{ $.Values.command.proxy | toYaml | indent 8 }}
        {{- end }}
        env:
        - name: PROXYSQL_MYSQL_PORT
          value: "{{ (required ".services.proxy.frontend.ports.proxy.targetPort missing" $.Values.services.proxy.frontend.ports.proxy.targetPort) }}"
        - name: PROXYSQL_ADMIN_PORT
          value: "{{ (required ".services.proxy.backend.ports.proxy.targetPort missing" $.Values.services.proxy.backend.ports.proxy.targetPort) }}"
          {{- range $envKey, $envValue := $.Values.env }}
            {{- if (has "proxy" $envValue.containerType) }}
        - name: {{ $envKey }}
              {{- if $envValue.value }}
          value: {{ $envValue.value | quote }}
              {{- end }}
              {{- if $envValue.secretName }}
          valueFrom:
            secretKeyRef:
              name: {{ $.Release.Name }}-{{ $envValue.secretName }}
              key: {{ $envValue.secretKey }}
              {{- end }}
            {{- end }}
          {{- end }}
        resources:
          requests:
            cpu: {{ $.Values.resourceLimits.cpu.proxy | default 0.5 }}
          limits:
            memory: {{ $.Values.resourceLimits.memory.proxy | default "64Mi" | quote }}
        ports:
          {{- range $portsKey, $portsValue := $.Values.services.proxy.backend.ports }}
          - containerPort: {{ $portsValue.targetPort }}
            name: {{ $portsKey }}
            protocol: {{ $portsValue.protocol | default "TCP" }}
          {{- end }}
          {{- if $.Values.monitoring.proxy.enabled }}
          - name: metrics
            containerPort: {{ (required ".services.proxy.backend.ports.restapi.targetPort missing" $.Values.services.proxy.backend.ports.restapi.targetPort) }}
          {{- end }}
        startupProbe:
          exec:
            command:
              - sh
              - -c
              - '/opt/proxysql/bin/startup.sh'
          {{- if $.Values.startupProbe }}
          {{ if $.Values.startupProbe.initialDelaySeconds.proxy }} {{- (printf "initialDelaySeconds: %d" (int64 $.Values.startupProbe.initialDelaySeconds.proxy)) }} {{ else }}initialDelaySeconds: 60 {{end}}
          {{ if $.Values.startupProbe.periodSeconds.proxy }} {{- (printf "periodSeconds: %d" (int64 $.Values.startupProbe.periodSeconds.proxy)) }} {{ else }}periodSeconds: 30 {{end}}
          {{ if $.Values.startupProbe.failureThreshold.proxy }} {{- (printf "failureThreshold: %d" (int64 $.Values.startupProbe.failureThreshold.proxy)) }} {{ else }}failureThreshold: 4 {{end}}
          {{ if $.Values.startupProbe.timeoutSeconds.proxy }} {{- (printf "timeoutSeconds: %d" (int64 $.Values.startupProbe.timeoutSeconds.proxy)) }} {{ else }}timeoutSeconds: 20 {{end}}
          {{- else }}
          initialDelaySeconds: 60
          periodSeconds: 30
          failureThreshold: 4
          timeoutSeconds: 20
          {{- end }}
        livenessProbe:
          exec:
            command:
              - sh
              - -c
              - '/opt/proxysql/bin/liveness.sh'
          {{- if $.Values.livenessProbe }}
          {{ if $.Values.livenessProbe.initialDelaySeconds.proxy }} {{- (printf "initialDelaySeconds: %d" (int64 $.Values.livenessProbe.initialDelaySeconds.proxy)) }} {{ else }}initialDelaySeconds: 60 {{end}}
          {{ if $.Values.livenessProbe.periodSeconds.proxy }} {{- (printf "periodSeconds: %d" (int64 $.Values.livenessProbe.periodSeconds.proxy)) }} {{ else }}periodSeconds: 30 {{end}}
          {{ if $.Values.livenessProbe.failureThreshold.proxy }} {{- (printf "failureThreshold: %d" (int64 $.Values.livenessProbe.failureThreshold.proxy)) }} {{ else }}failureThreshold: 4 {{end}}
          {{ if $.Values.livenessProbe.timeoutSeconds.proxy }} {{- (printf "timeoutSeconds: %d" (int64 $.Values.livenessProbe.timeoutSeconds.proxy)) }} {{ else }}timeoutSeconds: 20 {{end}}
          {{- else }}
          initialDelaySeconds: 60
          periodSeconds: 30
          failureThreshold: 4
          timeoutSeconds: 20
          {{- end }}
        readinessProbe:
          exec:
            command:
              - sh
              - -c
              - '/opt/proxysql/bin/readiness.sh'
          {{- if $.Values.readinessProbe }}
          {{ if $.Values.readinessProbe.initialDelaySeconds.proxy }} {{- (printf "initialDelaySeconds: %d" (int64 $.Values.readinessProbe.initialDelaySeconds.proxy)) }} {{ else }}initialDelaySeconds: 90 {{ end }}
          {{ if $.Values.readinessProbe.periodSeconds.proxy }} {{- (printf "periodSeconds: %d" (int64 $.Values.readinessProbe.periodSeconds.proxy)) }} {{ else }}periodSeconds: 20 {{ end }}
          {{ if $.Values.readinessProbe.successThreshold.proxy }} {{- (printf "successThreshold: %d" (int64 $.Values.readinessProbe.successThreshold.proxy)) }} {{ else }}successThreshold: 1 {{ end }}
          {{ if $.Values.readinessProbe.failureThreshold.proxy }} {{- (printf "failureThreshold: %d" (int64 $.Values.readinessProbe.failureThreshold.proxy)) }} {{ else }}failureThreshold: 3 {{ end }}
          {{ if $.Values.readinessProbe.timeoutSeconds.proxy }} {{- (printf "timeoutSeconds: %d" (int64 $.Values.readinessProbe.timeoutSeconds.proxy)) }} {{ else }}timeoutSeconds: 10 {{ end }}
          {{- else }}
          initialDelaySeconds: 90
          periodSeconds: 20
          successThreshold: 1
          failureThreshold: 2
          timeoutSeconds: 10
          {{- end }}
        lifecycle:
          preStop:
            exec:
              command:
                - sh
                - -c
                - '/opt/proxysql/bin/pre-stop-hook.sh'
          postStart:
            exec:
              command:
                - sh
                - -c
                - '/opt/proxysql/bin/post-start-hook.sh'
        volumeMounts:
          {{- range $volumeMountsKey, $volumeMountsValue := $.Values.volumeMounts.proxy }}
            {{- if (hasKey $volumeMountsValue "claimName") }}
              {{- range $volumeClaimTemplatesKey, $volumeClaimTemplatesValue := $.Values.volumeClaimTemplates }}
                {{- if eq $volumeClaimTemplatesKey $volumeMountsValue.claimName }}
          - name: {{ $volumeMountsKey }}-{{ $volumeMountsValue.claimName | lower }}
            mountPath: {{ $volumeMountsValue.mountPath }}
                  {{- if $volumeMountsValue.readOnly }}
            readOnly: {{ $volumeMountsValue.readOnly }}
                  {{- end }}
                {{- end }}
              {{- end }}
            {{- else }}
          - name: {{ $volumeMountsKey | lower }}
            mountPath: {{ $volumeMountsValue.mountPath }}
              {{- if $volumeMountsValue.readOnly }}
            readOnly: {{ $volumeMountsValue.readOnly }}
              {{- end }}
            {{- end }}
          {{- end }}
          - name: proxysql-conf
            mountPath: /opt/proxysql/etc/tpl/proxysql_servers.cfg.tpl
            subPath: proxysql_servers.cfg.tpl
            readOnly: true
          - name: proxysql-conf
            mountPath: /opt/proxysql/etc/tpl/mysql_variables.cfg.tpl
            subPath: mysql_variables.cfg.tpl
            readOnly: true
          - name: proxysql-conf
            mountPath: /opt/proxysql/etc/tpl/galera_hostgroups.cfg.tpl
            subPath: galera_hostgroups.cfg.tpl
            readOnly: true
          - name: proxysql-conf
            mountPath: /opt/proxysql/etc/tpl/mysql_servers.cfg.tpl
            subPath: mysql_servers.cfg.tpl
            readOnly: true
          - name: proxysql-conf
            mountPath: /opt/proxysql/etc/tpl/mysql_query_rules.cfg.tpl
            subPath: mysql_query_rules.cfg.tpl
            readOnly: true
          - name: proxysql-conf
            mountPath: /opt/proxysql/etc/tpl/mysql_users.cfg.tpl
            subPath: mysql_users.cfg.tpl
            readOnly: true
          - name: proxysql-entrypoint-sh
            mountPath: /opt/proxysql/bin/entrypoint-cluster.sh
            subPath: entrypoint-cluster.sh
            readOnly: true
          - name: proxysql-common-functions-extended-sh
            mountPath: /opt/proxysql/bin/common-functions-extended.sh
            subPath: common-functions-extended.sh
            readOnly: true
          - name: proxysql-probes-sh
            mountPath: /opt/proxysql/bin/startup.sh
            subPath: startup.sh
            readOnly: true
          - name: proxysql-probes-sh
            mountPath: /opt/proxysql/bin/liveness.sh
            subPath: liveness.sh
            readOnly: true
          - name: proxysql-probes-sh
            mountPath: /opt/proxysql/bin/readiness.sh
            subPath: readiness.sh
            readOnly: true
          - name: proxysql-hooks-sh
            mountPath: /opt/proxysql/bin/pre-stop-hook.sh
            subPath: pre-stop-hook.sh
            readOnly: true
          - name: proxysql-hooks-sh
            mountPath: /opt/proxysql/bin/post-start-hook.sh
            subPath: post-start-hook.sh
            readOnly: true
      terminationGracePeriodSeconds: {{ $.Values.terminationGracePeriodSeconds | default 86400 | int }}
      volumes:
        {{- range $volumeMountsKey, $volumeMountsValue := $.Values.volumeMounts.proxy }}
          {{- if $volumeMountsValue.type }}
            {{- if ne $volumeMountsValue.type "persistentVolume" }}
        - name: {{ $volumeMountsKey }}
              {{- if eq $volumeMountsValue.type "secret"}}
          {{ $volumeMountsValue.type }}:
            secretName: {{ $.Release.Name }}-{{ $volumeMountsKey }}
              {{- else if eq $volumeMountsValue.type "hostPath" }}
          {{ $volumeMountsValue.type }}:
            path: {{ $volumeMountsValue.hostPath }}
              {{- else }}
            name: {{ $volumeMountsKey }}
              {{- end }}
            {{- end }}
          {{- end }}
        {{- end }}
        - name: proxysql-conf
          configMap:
            name: proxysql-conf
            defaultMode: 0755
        - name: proxysql-entrypoint-sh
          configMap:
            name: proxysql-entrypoint-sh
            defaultMode: 0755
        - name: proxysql-common-functions-extended-sh
          configMap:
            name: proxysql-common-functions-extended-sh
            defaultMode: 0755
        - name: proxysql-probes-sh
          configMap:
            name: proxysql-probes-sh
            defaultMode: 0755
        - name: proxysql-hooks-sh
          configMap:
            name: proxysql-hooks-sh
            defaultMode: 0755
  volumeClaimTemplates:
  {{- range $volumeClaimTemplatesKey, $volumeClaimTemplatesValue := $.Values.volumeClaimTemplates }}
    {{- range $volumeMountsKey, $volumeMountsValue := $.Values.volumeMounts.proxy }}
      {{- if (hasKey $volumeMountsValue "claimName") }}
        {{- if eq $volumeClaimTemplatesKey $volumeMountsValue.claimName }}
  - metadata:
      name: {{ $volumeMountsKey }}-{{ $volumeMountsValue.claimName | lower }}
    spec:
          {{- if $volumeClaimTemplatesValue.storageClassName }}
      storageClassName: {{ $.Release.Name }}-{{ $volumeClaimTemplatesValue.storageClassName }}
          {{- end }}
      accessModes: {{ $volumeClaimTemplatesValue.accessModes }}
      resources:
        requests:
          storage: {{ $volumeClaimTemplatesValue.capacity }}
        {{- end }}
      {{- end }}
    {{- end }}
  {{- end }}
{{- end }}